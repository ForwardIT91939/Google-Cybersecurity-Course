SQL Notes:
----------------------------
Relational Database
SQL Queries
SQL Filters
SQL Joins
----------------------------
SQL - (Structured Query Language) A programming language used to creat, interact with, and request information from a database

Database - An organized collection of information or data
Databases:
  - Accessed by multiple people
  - Store massive amounts of data
  - Perform complex tasks while accessing data

Primary Key: A column where every row has a unique entry
Foreign Key: A column in a table that is a primary key in another table 

Query - A request for data from a database table or a combination of tables

Log - A record of events that occur within an organization's systems
-----------------------------
SQL Filtering versus Linux Filtering

Accessing SQL - there many interfaces for accessing SQL as well as many different versions of SQL. One way to access SQL is through Linux Command Line
  * To access SQL from linux, you need to type ina command for the version of SQL. To access SQLite [sqlite3] command will be used
  * Once the command is entered, all commands thereafter will be directed to SQL instead Linux command

Differences:
  - [Linux] filters data in the contezt of files and directories on a computer system
    * Its main function is to searching for files, manipulating file permissions, or managing processes
    * Syntax - linux uses various commands and command-line options sepcific to each filtering tool. Syntax varies depending on the tool and purpose
      - Example: find, sed, cut, e grep
    * Sturcture - Linux is more free-form and not as tidy, for example: if you wanted to access a log of employee log-in attempts, Linux would print the data as a line of text withoug organization
    * Joining Tables - Linux does not have this funtionality making it difficult to allow data to be connected to other information on the computer


  - [SQL] is used to filter data within a database management system.
    * Its main function is used for querying and manipulating data stored in tables and retrieving specific information
    * Syntax - SQL uses the Structured Query Language, a standardized language with specific keywords and clauses for filtering data across different SQL databases.
      - Example: WHERE, SELECT, JOIN
    * Structure - Offers more structure, for example: if you wanted to access a log of employee log-in attempts, SQL would have each record separated into columns.
      SQL provides results that are more easily readable and that can be adjusted more quickly than when using Linux
    * Joining Tables - Security-related decsions require information form different tables. SQL allows to join multiple tables together when returning data
  -----------------------------
SQL Keywords - SQL Queries:

SELECT - Indicates which columns to return
FROM - Indicates which table to query

Syntax - The rules that determine what is correctly structured in a computing language

SELECT * - Instructs SQL to return all columns from the specified table (Commonly known as "select all") 
NOTE: Using SELECT * may not be advisable when working with large databases and tables; in those cases, the final output may be difficult to understand and might be slow to run

Chinook (Database) - Database used within Course
------------------------------------------------------
ORDER BY - Sequences the records returned by a query based on a specified column or coloumns. This can be in either ascending or descending order
  * Ascending order - Using ORDER BY at the end of the query will order the table in ascending order - however, if you place ORDER BY followed by an arguement, it will sory in alphabetical order or numerically
    within that column
Example: 
SELECT customerid, city, country
FROM customers
ORDER BY city;

+------------+--------------+----------------+
| CustomerId | City         | Country        |
+------------+--------------+----------------+
|         48 | Amsterdam    | Netherlands    |
|         59 | Bangalore    | India          |
|         36 | Berlin       | Germany        |
|         38 | Berlin       | Germany        |
|         42 | Bordeaux     | France         |
|         23 | Boston       | USA            |
|         13 | Brasília     | Brazil         |
|          8 | Brussels     | Belgium        |
|         45 | Budapest     | Hungary        |
|         56 | Buenos Aires | Argentina      |
|         24 | Chicago      | USA            |
|          9 | Copenhagen   | Denmark        |
|         19 | Cupertino    | USA            |
|         58 | Delhi        | India          |
|         43 | Dijon        | France         |
|         46 | Dublin       | Ireland        |
|         54 | Edinburgh    | United Kingdom |
|         14 | Edmonton     | Canada         |
|         26 | Fort Worth   | USA            |
|         37 | Frankfurt    | Germany        |
|         31 | Halifax      | Canada         |
|         44 | Helsinki     | Finland        |
|         34 | Lisbon       | Portugal       |
|         52 | London       | United Kingdom |
|         53 | London       | United Kingdom |
+------------+--------------+----------------+
(Output limit exceeded, 25 of 59 total rows shown)
------------------------------------------------------
DESC - you can use the ORDER BY with the DESC keyword to sort in a descending order. The keyword tells SQL to sort numbers from largest to smallest, or alphabetically from Z to A. 
Example:
SELECT customerid, city, country
FROM customers
ORDER BY city DESC;

+------------+---------------------+----------------+
| CustomerId | City                | Country        |
+------------+---------------------+----------------+
|         33 | Yellowknife         | Canada         |
|         32 | Winnipeg            | Canada         |
|         49 | Warsaw              | Poland         |
|          7 | Vienne              | Austria        |
|         15 | Vancouver           | Canada         |
|         27 | Tucson              | USA            |
|         29 | Toronto             | Canada         |
|         10 | São Paulo           | Brazil         |
|         11 | São Paulo           | Brazil         |
|          1 | São José dos Campos | Brazil         |
|          2 | Stuttgart           | Germany        |
|         51 | Stockholm           | Sweden         |
|         55 | Sidney              | Australia      |
|         57 | Santiago            | Chile          |
|         28 | Salt Lake City      | USA            |
|         47 | Rome                | Italy          |
|         12 | Rio de Janeiro      | Brazil         |
|         21 | Reno                | USA            |
|         17 | Redmond             | USA            |
|          5 | Prague              | Czech Republic |
|          6 | Prague              | Czech Republic |
|         35 | Porto               | Portugal       |
|         39 | Paris               | France         |
|         40 | Paris               | France         |
|         30 | Ottawa              | Canada         |
+------------+---------------------+----------------+
(Output limit exceeded, 25 of 59 total rows shown)
------------------------------------------------------
You can also sort based on multiple columns:
Example:
SELECT customerid, city, country
FROM customers
ORDER BY country, city;
+------------+---------------------+----------------+
| CustomerId | City                | Country        |
+------------+---------------------+----------------+
|         56 | Buenos Aires        | Argentina      |
|         55 | Sidney              | Australia      |
|          7 | Vienne              | Austria        |
|          8 | Brussels            | Belgium        |
|         13 | Brasília            | Brazil         |
|         12 | Rio de Janeiro      | Brazil         |
|          1 | São José dos Campos | Brazil         |
|         10 | São Paulo           | Brazil         |
|         11 | São Paulo           | Brazil         |
|         14 | Edmonton            | Canada         |
|         31 | Halifax             | Canada         |
|          3 | Montréal            | Canada         |
|         30 | Ottawa              | Canada         |
|         29 | Toronto             | Canada         |
|         15 | Vancouver           | Canada         |
|         32 | Winnipeg            | Canada         |
|         33 | Yellowknife         | Canada         |
|         57 | Santiago            | Chile          |
|          5 | Prague              | Czech Republic |
|          6 | Prague              | Czech Republic |
|          9 | Copenhagen          | Denmark        |
|         44 | Helsinki            | Finland        |
|         42 | Bordeaux            | France         |
|         43 | Dijon               | France         |
|         41 | Lyon                | France         |
+------------+---------------------+----------------+
(Output limit exceeded, 25 of 59 total rows shown)
------------------------------------------------------
Operator - A symbol or keyword that represents an operation

WHERE - Indicates the condition for a filter
  *Example: [WHERE country = 'USA']
FULL EXAMPLE: SELECT *
              From log_in_attempts
              WHERE country = 'USA';
You can also use filters to find certain patterns
To do so... use: %
EXAMPLE: 'East%'

^ you are unable to use [=] when searching for patterns - you must use [LIKE]

LIKE - Used with WHERE to seaarch for a pattern in a column
  *For example - lets say that the database stores log in attempts with different inconsistencies with US or USA
  * you would use: SELECT *
                   FROM log_in_attempts
                   WHERE country LIKE 'US%';

While using WHERE and LIKE There are multiple wildcards you can use
1. [_]
2. [%]

EXAMPLES:
'a%'

apple123, art, a
-------------------
'a_'

as, an, a7
-------------------
'a__' 

ant, add, a1c
-------------------
'%a'

pizza, Z6ra, a
-------------------
'_a'

ma, 1a, Ha
-------------------
'%a%'

Again, back, a
-------------------
'_a_'

Car, ban, ea7
------------------------------------------------------
[WHERE] EXAMPLES:

SELECT firstname, lastname, title, email
FROM employees
WHERE title = 'IT Staff';

+-----------+----------+----------+------------------------+
| FirstName | LastName | Title    | Email                  |
+-----------+----------+----------+------------------------+
| Robert    | King     | IT Staff | robert@chinookcorp.com |
| Laura     | Callahan | IT Staff | laura@chinookcorp.com  |
+-----------+----------+----------+------------------------+

-------------------
SELECT lastname, firstname, title, email
FROM employees
WHERE title LIKE 'IT%';

+----------+-----------+------------+-------------------------+
| LastName | FirstName | Title      | Email                   |
+----------+-----------+------------+-------------------------+
| Mitchell | Michael   | IT Manager | michael@chinookcorp.com |
| King     | Robert    | IT Staff   | robert@chinookcorp.com  |
| Callahan | Laura     | IT Staff   | laura@chinookcorp.com   |
+----------+-----------+------------+-------------------------+

-------------------
SELECT firstname,lastname, state, country
FROM customers
WHERE state LIKE 'N_';

+-----------+----------+-------+---------+
| FirstName | LastName | State | Country |
+-----------+----------+-------+---------+
| Michelle  | Brooks   | NY    | USA     |
| Kathy     | Chase    | NV    | USA     |
| Martha    | Silk     | NS    | Canada  |
| Ellie     | Sullivan | NT    | Canada  |
+-----------+----------+-------+---------+

------------------------------------------------------
Operators (for working with "numeric" or "date and time" data types):
[=] - Equals
[>] - Greater than
[<] - Less than
[<>] - Not equal to
[>=] - Greater than or equal to 
[<=] - Less than or equal to

*EXAMPLE:  
  SELECT *
  FROM log_in_attempts
  WHERE time > '18:00';
OR
  SELECT firstname, lastname, birthdate
  FROM employees
  WHERE birthdate > '1970-01-01';

  +-----------+----------+---------------------+
  | FirstName | LastName | BirthDate           |
  +-----------+----------+---------------------+
  | Jane      | Peacock  | 1973-08-29 00:00:00 |
  | Michael   | Mitchell | 1973-07-01 00:00:00 |
  | Robert    | King     | 1970-05-29 00:00:00 |
  +-----------+----------+---------------------+

-------------------
BETWEEN - An operator that filters for numbers or dates within a date

*EXAMPLE: 
  SELECT *
  FROM machines
  WHERE OS_patch_date BETWEEN '2021-03-01' AND '2021-09-01';
OR
  SELECT firstname, lastname, hiredate
  FROM employees
  WHERE hiredate BETWEEN '2002-01-01' AND '2003-01-01';

  +-----------+----------+---------------------+
  | FirstName | LastName | HireDate            |
  +-----------+----------+---------------------+
  | Andrew    | Adams    | 2002-08-14 00:00:00 |
  | Nancy     | Edwards  | 2002-05-01 00:00:00 |
  | Jane      | Peacock  | 2002-04-01 00:00:00 |
  +-----------+----------+---------------------+

------------------------------------------------------
AND - Specifies that both conditions must be met simultaneously

*EXAMPLE: 

  SELECT firstname, lastname, email, country, supportrepid
  FROM customers
  WHERE supportrepid = 5 AND country = 'USA';

  +-----------+----------+-------------------------+---------+--------------+
  | FirstName | LastName | Email                   | Country | SupportRepId |
  +-----------+----------+-------------------------+---------+--------------+
  | Jack      | Smith    | jacksmith@microsoft.com | USA     |            5 |
  | Kathy     | Chase    | kachase@hotmail.com     | USA     |            5 |
  | Victor    | Stevens  | vstevens@yahoo.com      | USA     |            5 |
  | Julia     | Barnett  | jubarnett@gmail.com     | USA     |            5 |
  +-----------+----------+-------------------------+---------+--------------+

-------------------
OR - Specifies that either condition can be met

*EXAMPLE: 

  SELECT firstname, lastname, email, country
  FROM customers
  WHERE country = 'Canada' OR country = 'USA';

  +-----------+------------+--------------------------+---------+
  | FirstName | LastName   | Email                    | Country |
  +-----------+------------+--------------------------+---------+
  | François  | Tremblay   | ftremblay@gmail.com      | Canada  |
  | Mark      | Philips    | mphilips12@shaw.ca       | Canada  |
  | Jennifer  | Peterson   | jenniferp@rogers.ca      | Canada  |
  | Frank     | Harris     | fharris@google.com       | USA     |
  | Jack      | Smith      | jacksmith@microsoft.com  | USA     |
  | Michelle  | Brooks     | michelleb@aol.com        | USA     |
  | Tim       | Goyer      | tgoyer@apple.com         | USA     |
  | Dan       | Miller     | dmiller@comcast.com      | USA     |
  | Kathy     | Chase      | kachase@hotmail.com      | USA     |
  | Heather   | Leacock    | hleacock@gmail.com       | USA     |
  | John      | Gordon     | johngordon22@yahoo.com   | USA     |
  | Frank     | Ralston    | fralston@gmail.com       | USA     |
  | Victor    | Stevens    | vstevens@yahoo.com       | USA     |
  | Richard   | Cunningham | ricunningham@hotmail.com | USA     |
  | Patrick   | Gray       | patrick.gray@aol.com     | USA     |
  | Julia     | Barnett    | jubarnett@gmail.com      | USA     |
  | Robert    | Brown      | robbrown@shaw.ca         | Canada  |
  | Edward    | Francis    | edfrancis@yachoo.ca      | Canada  |
  | Martha    | Silk       | marthasilk@gmail.com     | Canada  |
  | Aaron     | Mitchell   | aaronmitchell@yahoo.ca   | Canada  |
  | Ellie     | Sullivan   | ellie.sullivan@shaw.ca   | Canada  |
+-----------+------------+--------------------------+---------+
NOTE:  Even if both conditions are based on the same column, you need to write out both full conditions. For instance, the query in the previous example contains the filter WHERE country = 'Canada' OR country = 'USA'. 

-------------------
NOT - Negates a condition

*EXAMPLE: 
  SELECT firstname, lastname, email, country
  FROM customers
  WHERE NOT country = 'Canada' AND NOT country = 'USA';

  +-----------+-------------+-------------------------------+----------------+
  | FirstName | LastName    | Email                         | Country        |
  +-----------+-------------+-------------------------------+----------------+
  | Luís      | Gonçalves   | luisg@embraer.com.br          | Brazil         |
  | Leonie    | Köhler      | leonekohler@surfeu.de         | Germany        |
  | Bjørn     | Hansen      | bjorn.hansen@yahoo.no         | Norway         |
  | František | Wichterlová | frantisekw@jetbrains.com      | Czech Republic |
  | Helena    | Holý        | hholy@gmail.com               | Czech Republic |
  | Astrid    | Gruber      | astrid.gruber@apple.at        | Austria        |
  | Daan      | Peeters     | daan_peeters@apple.be         | Belgium        |
  | Kara      | Nielsen     | kara.nielsen@jubii.dk         | Denmark        |
  | Eduardo   | Martins     | eduardo@woodstock.com.br      | Brazil         |
  | Alexandre | Rocha       | alero@uol.com.br              | Brazil         |
  | Roberto   | Almeida     | roberto.almeida@riotur.gov.br | Brazil         |
  | Fernanda  | Ramos       | fernadaramos4@uol.com.br      | Brazil         |
  | João      | Fernandes   | jfernandes@yahoo.pt           | Portugal       |
  | Madalena  | Sampaio     | masampaio@sapo.pt             | Portugal       |
  | Hannah    | Schneider   | hannah.schneider@yahoo.de     | Germany        |
  | Fynn      | Zimmermann  | fzimmermann@yahoo.de          | Germany        |
  | Niklas    | Schröder    | nschroder@surfeu.de           | Germany        |
  | Camille   | Bernard     | camille.bernard@yahoo.fr      | France         |
  | Dominique | Lefebvre    | dominiquelefebvre@gmail.com   | France         |
  | Marc      | Dubois      | marc.dubois@hotmail.com       | France         |
  | Wyatt     | Girard      | wyatt.girard@yahoo.fr         | France         |
  | Isabelle  | Mercier     | isabelle_mercier@apple.fr     | France         |
  | Terhi     | Hämäläinen  | terhi.hamalainen@apple.fi     | Finland        |
  | Ladislav  | Kovács      | ladislav_kovacs@apple.hu      | Hungary        |
  | Hugh      | O'Reilly    | hughoreilly@apple.ie          | Ireland        |
  +-----------+-------------+-------------------------------+----------------+
  (Output limit exceeded, 25 of 38 total rows shown)

------------------------------------------------------















