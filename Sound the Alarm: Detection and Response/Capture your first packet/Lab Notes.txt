Activity: Capture your first packet
---------------------------------------
Overview: As a security analyst, it’s important to know how to capture and filter network traffic in a Linux environment.
You’ll also need to know the basic concepts associated with network interfaces.
In this lab activity, you’ll perform tasks associated with using tcpdump to capture network traffic.
You’ll capture the data in a packet capture (p-cap) file and then examine the contents of the captured packet data to focus on specific types of traffic.

Scenario: 
You’re a network analyst who needs to use tcpdump to capture and analyze live network traffic from a Linux virtual machine.
The lab starts with your user account, called analyst, already logged in to a Linux terminal.
Your Linux user's home directory contains a sample packet capture file that you will use at the end of the lab to answer a few questions about the network traffic that it contains.
Here’s how you’ll do this: First, you’ll identify network interfaces to capture network packet data. 
Second, you’ll use tcpdump to filter live network traffic. 
Third, you’ll capture network traffic using tcpdump. Finally, you’ll filter the captured packet data.

Tasks: 
  - Identify available network interfaces
  - Use tcpdump to capture live network interfaces
  - Save network traffic to a packet capture file
  - Filter the packet capture data
---------------------------------------
Task 1 - Identify Network Interfaces

  - Use ifconfig to identify the interfaces that are available
    Sudo ifconfig
  Note: The Ethernet network interface is identified by the entry with the eth prefix.
        So, in this lab, you'll use eth0 as the interface that you will capture network packet data from in the following tasks
  - Use tcpdump to identify the interface options available for packet capture
    sudo tcpdump -D
  Note: This command will also allow you to identify which network interfaces are available. 
        This may be useful on systems that do not include the ifconfig command
---------------------------------------
Task 2 - Inspect the network traffic of a network interface with tcpdump

  - Filter live network packet data from the eht0 interface with tcpdump
    sudo tcpdump -i eth0 -v -c5
  Note: This command will run tcpdump with the following options:
        -i eth0: Capture data specifically from the eth0 interface.
        -v: Display detailed packet data.
        -c5: Capture 5 packets of data
---------------------------------------
Task 3 - Capture Network Traffic with tcpdump

  - Capture packet data into a file called capture.pcap
    sudo tcpdump -i eth0 -nn -c9 port 80 -w capture.pcap &
  Note: This command will run tcpdump in the background with the following options:
        -i eth0: Capture data from the eth0 interface.
        -nn: Do not attempt to resolve IP addresses or ports to names.This is best practice from a security perspective, as the lookup data may not be valid. It also prevents malicious actors from being alerted to an investigation.
        -c9: Capture 9 packets of data and then exit.
        port 80: Filter only port 80 traffic. This is the default HTTP port.
        -w capture.pcap: Save the captured data to the named file.
        &: This is an instruction to the Bash shell to run the command in the background.
  - Use curl to generate some HTTP (port 80) traffic:
    curl opensource.google.com
  - Verify that packet data has been captured
    ls -l capture.pcap
---------------------------------------
Task 4 - Filter the captured packet data

  - Use the tcpdump command to filter the packet header data from the capture.pcap capture file
    sudo tcpdump -nn -r capture.pcap -v
  Note: This command will run tcpdump with the following options:
        -nn: Disable port and protocol name lookup.
        -r: Read capture data from the named file.
        -v: Display detailed packet data
  - Use the tcpdump command to filter the extended packet data from the capture.pcap capture file
    sudo tcpdump -nn -r capture.pcap -X
  Note: This command will run tcpdump with the following options:
        -nn: Disable port and protocol name lookup.
        -r: Read capture data from the named file.
        -X: Display the hexadecimal and ASCII output format packet data. Security analysts can analyze hexadecimal and ASCII output to detect patterns or anomalies during malware analysis or forensic analysis
  Note 2: Hexadecimal, also known as hex or base 16, uses 16 symbols to represent values, including the digits 0-9 and letters A, B, C, D, E, and F.
          American Standard Code for Information Interchange (ASCII) is a character encoding standard that uses a set of characters to represent text in digital form
---------------------------------------
Test your Understanding

  - What command would you use to capture 3 packets on any interface with the verbose option?
    sudo tcpdump -c3 -i any -v
  - What does the -i option indicate?
    The network interface to monitor
  - What type of information does the -v option include?
    Verbose information
  - What tcpdump command can you use to identify the interfaces that are available to perform a packet capture on?
    sudo tcpdump -D














