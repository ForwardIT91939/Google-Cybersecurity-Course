== Activity: Assign Python variables

== Introduction

Variables help security analysts to keep track of a variety of
security-related information. For example, analysts may need to create
Python variables for the users who are allowed to log in, the number of
login attempts that they’re permitted, and the current number of
attempts that a user has made.

In this lab, you’ll practice assigning values to variables and
determining their data types.

Tips for completing this lab

As you navigate this lab, keep the following tips in mind:

* `### YOUR CODE HERE ###` indicates where you should write code. Be
sure to replace this with your own code before running the code cell.
* Feel free to open the hints for additional guidance as you work on
each task.
* To enter your answer to a question, double-click the markdown cell to
edit. Be sure to replace the ``[Double-click to enter your responses
here.]'' with your own answer.
* You can save your work manually by clicking File and then Save in the
menu bar at the top of the notebook.
* You can download your work locally by clicking File and then Download
and then specifying your preferred file format in the menu bar at the
top of the notebook.

== Scenario

You are a security analyst who is responsible for writing code that will
automate analysis of login attempts made to a specific device. As the
first step, you’ll need to create variables to keep track of information
relevant to the login process. This information includes the device ID,
list of approved usernames, maximum login attempts allowed per user,
current login attempts made by a user, and login status.

Throughout this lab, you’ll assign these variables and check the data
types of the variables.

== Task 1

In your work as an analyst, imagine there is a device only users
specified on an allow list can access, and its device ID is `"72e08x0"`.

In the following code cell, assign this value to a variable named
`device_id`. Then, display the contents of the variable and observe the
output.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[3]:*+
[source, ipython3]
----
# Assign the `device_id` variable to the device ID that only specified users can access

device_id = "72e08x0"

# Display `device_id`

print(device_id)

----


+*Out[3]:*+
----
72e08x0
----

Hint 1

Use quotation marks around the value that you assign to the `device_id`
variable.

Hint 2

Assign the value `"72e08x0"` to the variable `device_id`. To do this,
place the value to right of the `=` operator.

Hint 3

To display the contents of `device_id`, place the name of this variable
inside the `print()` function.

== Task 2

Now that the variable `device_id` is defined, you can return its data
type.

In this task, use a Python function to find the data type of the
variable `device_id`. Store the data type in another variable called
`device_id_type`. Then, display `device_id_type` to examine the output.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[5]:*+
[source, ipython3]
----
# Assign the `device_id` variable to the device ID that only specified users can access

device_id = "72e08x0"

# Assign `device_id_type` to the data type of `device_id`

device_id_type = str

# Display `device_id_type`

print(device_id_type)
    
----


+*Out[5]:*+
----
<class 'str'>
----

Hint 1

The `type()` function allows you to get the data type of a given value.

Hint 2

Use `type(device_id)` to get the data type of the `device_id` variable.

Hint 3

To display `device_id_type`, place the name of this variable inside the
`print()` function.

== *Question 1*

*Based on the output above, what do you observe about the data type of
`device_id`?*

The output above shows that the data type of device_id is str which is a
string

== Task 3

As you continue your work, you’re provided a list of usernames of users
who are allowed to access the device. The usernames with this access are
`"madebowa"`, `"jnguyen"`, `"tbecker"`, `"nhersh"`, and `"redwards"`.

In this task, create a variable called `username_list`. Assign a list
with the approved usernames to this variable. Then, display the value of
the `username_list` variable.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[7]:*+
[source, ipython3]
----
# Assign `username_list` to the list of usernames who are allowed to access the device

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]

# Display `username_list`

print(username_list)

----


+*Out[7]:*+
----
['madebowa', 'jnguyen', 'tbecker', 'nhersh', 'redwards']
----

Hint 1

To create a list in Python, use square brackets. Inside the square
brackets, write the elements of the list, with a comma between elements.

Hint 2

To assign a value to a variable in Python, place the name of the
variable to the left of the `=` operator, and place the value to the
right of the `=` operator.

In this task, make sure to place
`["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]` to the right
of the `=` operator.

Hint 3

To display `username_list`, place the name of this variable inside the
`print()` function.

== Task 4

In this task, find the data type of the `username_list`. Store the type
in a variable called `username_list_type`. Then, display
`username_list_type` to examine the output.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[11]:*+
[source, ipython3]
----
# Assign `username_list` to the list of usernames who are allowed to access the device

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]

# Assign `username_list_type` to the data type of `username_list`

username_list_type = list

# Display `username_list_type`

print(username_list_type)

----


+*Out[11]:*+
----
<class 'list'>
----

Hint 1

The `type()` function allows you to get the data type of a given value.

Hint 2

To get the data type of `username_list`, call the `type()` function and
pass in `username_list`.

Hint 3

In Python, you can use the `print()` function to display the value of a
variable. To display `username_list_type`, call the `print()` function
and pass in `username_list_type`.

== *Question 2*

*Based on the output above, what do you observe about the data type of
`username_list`?*

Based on the output above, the data type of username_list is a list.

== Task 5

Now, imagine that you’ve been informed that the previous list is not
up-to-date and that there is another employee that now has access to the
device. You’re given the updated list of usernames with access,
including the new employee, as follows: `"madebowa"`, `"jnguyen"`,
`"tbecker"`, `"nhersh"`, `"redwards"`, and `"lpope"`.

In this task, reassign the variable `username_list` to the new list. Run
the code to display the list before and after it’s been updated to
observe the difference.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[12]:*+
[source, ipython3]
----
# Assign `username_list` to the list of usernames who are allowed to access the device

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards"]

# Display `username_list`

print(username_list)

# Assign `username_list` to the updated list of usernames who are allowed to access the device

username_list = ["madebowa", "jnguyen", "tbecker", "nhersh", "redwards", "lpope"]

# Display `username_list`

print(username_list)

----


+*Out[12]:*+
----
['madebowa', 'jnguyen', 'tbecker', 'nhersh', 'redwards']
['madebowa', 'jnguyen', 'tbecker', 'nhersh', 'redwards', 'lpope']
----

Hint 1

When reassigning a variable to a new value in Python, place the name of
the variable to the left of the `=` operator, just as you would when
assigning the variable for the first time.

Hint 2

To reassign `username_list` to the updated list, place `username_list`
to the left of the `=` operator.

== *Question 3*

*Based on the output above, what do you observe about the contents of
`username_list`?*

When inputting the same list - the new list will populate once the code
goes down in order. So the reassignment of lists can be altered without
having to adjust the code from the beginning.

== Task 6

In this task, define a variable called `max_logins` that represents the
maximum number of login attempts allowed per user. Store the value `3`
in this variable. Then, store its data type in another variable called
`max_logins_type`. Display `max_logins_type` to examine the output.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[16]:*+
[source, ipython3]
----
# Assign `max_logins` to the value 3

max_logins = 3

# Assign `max_logins_type` to the data type of `max_logins`

max_logins_type = type(int)

# Display `max_logins_type`

print (max_logins_type)

----


+*Out[16]:*+
----
<class 'type'>
----

Hint 1

When assigning a value to a variable in Python, use the `=` operator.
Place the name of the variable to the left of the `=` operator, and
place the value to the right of the `=` operator.

Hint 2

To assign `3` to `max_logins`, place `max_logins` to the left of the `=`
operator, and place `3` to the right of the `=` operator.

To assign `max_logins_type`, place `max_logins_type` to the left of the
`=` operator before the `type()` function call.

Hint 3

In Python, you can use the `print()` function to display the value of a
variable. To display `max_logins_type`, call `print()` and pass in
`max_logins_type`.

== *Question 4*

*Based on the output above, what do you observe about the data type of
`max_logins`?*

max_logins data type is int which is integer

== Task 7

In this task, define a variable called `login_attempts` that represents
the current number of login attempts made by a user. Store the value `2`
in this variable. Then, store its data type in a variable called
`login_attempts_type`. Display `login_attempts_type` to observe the
output.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[17]:*+
[source, ipython3]
----
# Assign `login_attempts` to the value 2

login_attempts = 2

# Assign `login_attempts_type` to the data type of `login_attempts`

login_attempts_type = type(int)

# Display `login_attempts_type`

print(login_attempts_type)

----


+*Out[17]:*+
----
<class 'type'>
----

Hint 1

When assigning a value to a variable in Python, use the `=` operator.
Place the name of the variable to the left of the `=` operator, and
place the value to the right of the `=` operator.

Hint 2

To assign `2` to `login_attempts`, place `login_attempts` to the left of
the `=` operator, and place `2` to the right of the `=` operator.

To assign `login_attempts_type`, place `login_attempts_type` to the left
of the `=` operator, and place a call to the `type()` function to the
right of the `=` operator.

When calling `type()`, make sure to pass in `login_attempts`.

Hint 3

In Python, you can use the `print()` function to display the value of a
variable. To display `login_attempts_type`, call `print()` and pass in
`login_attempts_type`.

== *Question 5*

*Based on the output above, what do you observe about the data type of
`login_attempts`?*

the data type of login attempts is an integer

== Task 8

In this task, you’ll determine the Boolean value that represents whether
the current number of login attempts a user has made is less than or
equal to the maximum number of login attempts allowed.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[18]:*+
[source, ipython3]
----
# Assign `max_logins` to the value 3

max_logins = 3

# Assign `login_attempts` to the value 2

login_attempts = 2

# Determine whether the current number of login attempts a user has made is less than or equal to the maximum number of login attempts allowed,
# and display the resulting Boolean value

print(max_logins <= login_attempts)
    
----


+*Out[18]:*+
----
False
----

Hint 1

In Python, you can use the `<=` comparison operator to determine whether
one value is less than or equal to another value.

Hint 2

To determine whether the current number of login attempts a user has
made is less than or equal to the maximum number of login attempts
allowed, use the `<=` operator. Place `login_attempts` to the left of
the `<=` operator, and place `max_logins` to the right of the `<=`
operator.

To make sure the resulting Boolean value is displayed, write this code
inside of the parantheses where `print()` is called.

== *Question 6*

*What is the output? What does this mean?*

The output was false, which determines that the max number of logins was
not met by the number of login attempts. So, in this scenario, the user
has one more attempt.

== Task 9

This code continues to check for the Boolean value of whether
`max_logins` is less than or equal to `login_attempts`. In this task,
reassign other values to `login_attempts`. For example, you might choose
a value that is higher than the maximum number of attempts allowed.
Observe how the output changes.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[20]:*+
[source, ipython3]
----
# Assign `max_logins` to the value 3

max_logins = 3

# Assign `login_attempts` to a specific value

login_attempts = 2

# Determine whether the current number of login attempts a user has made is less than or equal to the maximum number of login attempts allowed,
# and display the resulting Boolean value

print(login_attempts <= max_logins)

----


+*Out[20]:*+
----
True
----

Hint 1

To assign `login_attempts` to a specific value, make sure to write the
value to the right of the `=` operator.

== *Question 7*

*Based on the different values you assigned to `login_attempts`, what
did you observe about the output?*

When you change the value the given response is different. based on
whether the value is less than or greater than the answer will
ultimately change which will indicate whether or not the user has
exceeded or hasnt exceeded the max login attempt.

== Task 10

Finally, you can also assign a Boolean value of `True` or `False` to a
variable.

In this task, you’ll create a variable called `login_status`, which is a
Boolean that represents whether a user is logged in. Assign `False` to
this variable and store its data type in a variable called
`login_status_type` and display it.

Be sure to replace each `### YOUR CODE HERE ###` with your own code
before you run the following cell.


+*In[22]:*+
[source, ipython3]
----
# Assign `login_status` to the Boolean value False

login_status = False

# Assign `login_status_type` to the data type of `login_status`

login_status_type = type(login_status)

# Display `login_status_type`

print(login_status_type)

----


+*Out[22]:*+
----
<class 'bool'>
----

Hint 1

To assign the Boolean value `False` to the `login_status` variable, make
sure to write `False` to the right of the `=` operator.

Hint 2

Note that Boolean values should not have quotation marks around them in
code.

== *Question 8*

*Based on the output above, what do you observe about the data type of
`login_status`?*

The data type output will be bool

== Conclusion

*What are your key takeaways from this lab?*

This was a great exercise to determine variables, data types and
booleans.
